(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{540:function(t,a,s){"use strict";s.r(a);var r=s(34),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器是如何渲染页面的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是如何渲染页面的"}},[t._v("#")]),t._v(" 浏览器是如何渲染页面的？")]),t._v(" "),s("p",[t._v("当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。")]),t._v(" "),s("p",[t._v("在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\n"),s("img",{attrs:{src:t.$withBase("/img/css/01.jpg"),alt:"图片"}})]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画")]),t._v(" "),s("p",[t._v("每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。")]),t._v(" "),s("p",[t._v("这样，整个渲染流程就形成了一套组织严密的生产流水线。\n"),s("img",{attrs:{src:t.$withBase("/img/css/02.jpg"),alt:"图片"}})]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第一步-解析-html"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-解析-html"}},[t._v("#")]),t._v(" 第一步： 解析 HTML")]),t._v(" "),s("p",[t._v("解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。")]),t._v(" "),s("p",[t._v("如果主线程解析到"),s("code",[t._v("link")]),t._v("位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。"),s("strong",[t._v("这就是 CSS 不会阻塞 HTML 解析的根本原因")]),t._v("。")]),t._v(" "),s("p",[t._v("如果主线程解析到"),s("code",[t._v("script")]),t._v("位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。"),s("strong",[t._v("这就是 JS 会阻塞 HTML 解析的根本原因")]),t._v("。")]),t._v(" "),s("p",[t._v("第一步完成后，会得到 "),s("strong",[t._v("DOM 树")]),t._v("和 "),s("strong",[t._v("CSSOM 树")]),t._v("，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第二步-样式计算-构建渲染树-render-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-样式计算-构建渲染树-render-tree"}},[t._v("#")]),t._v(" 第二步：样式计算, 构建渲染树（Render Tree）")]),t._v(" "),s("p",[t._v("主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。")]),t._v(" "),s("p",[t._v("在这一过程中，很多预设值会变成绝对值，比如"),s("code",[t._v("red")]),t._v("会变成"),s("code",[t._v("rgb(255,0,0)")]),t._v("；相对单位会变成绝对单位，比如"),s("code",[t._v("em")]),t._v("会变成"),s("code",[t._v("px")])]),t._v(" "),s("p",[t._v("这一步完成后，会得到一棵带有样式的 DOM 树，也称为"),s("strong",[t._v("渲染树(Render Tree)")]),t._v("。")]),t._v(" "),s("p",[t._v("需要注意：")]),t._v(" "),s("ul",[s("li",[t._v("Render Tree和DOM Tree不完全对应")]),t._v(" "),s("li",[s("code",[t._v("display: none")]),t._v("的元素不在Render Tree中")]),t._v(" "),s("li",[s("code",[t._v("visibility: hidden")]),t._v("的元素在Render Tree中")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第三步-布局-layout-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-布局-layout-。"}},[t._v("#")]),t._v(" 第三步：布局（Layout）。")]),t._v(" "),s("p",[t._v("布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。")]),t._v(" "),s("p",[t._v("大部分时候，DOM 树和布局树并非一一对应。")]),t._v(" "),s("p",[t._v("比如"),s("code",[t._v("display:none")]),t._v("的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第四步-分层-layer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四步-分层-layer"}},[t._v("#")]),t._v(" 第四步：分层（Layer）")]),t._v(" "),s("p",[t._v("主线程会使用一套复杂的策略对整个布局树中进行分层。")]),t._v(" "),s("p",[t._v("分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。")]),t._v(" "),s("p",[t._v("滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过"),s("code",[t._v("will-change")]),t._v("属性更大程度的影响分层结果。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第五步-绘制-paint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五步-绘制-paint"}},[t._v("#")]),t._v(" 第五步：绘制（Paint）")]),t._v(" "),s("p",[t._v("主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第六步-分块-tiling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六步-分块-tiling"}},[t._v("#")]),t._v(" 第六步： 分块 (Tiling)")]),t._v(" "),s("p",[t._v("合成线程首先对每个图层进行分块，将其划分为更多的小区域。")]),t._v(" "),s("p",[t._v("它会从线程池中拿取多个线程来完成分块工作。")]),t._v(" "),s("h2",{attrs:{id:"第七步-光栅化-raster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第七步-光栅化-raster"}},[t._v("#")]),t._v(" 第七步： 光栅化（Raster）")]),t._v(" "),s("p",[t._v("分块完成后，进入"),s("strong",[t._v("光栅化")]),t._v("阶段。")]),t._v(" "),s("p",[t._v("合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。")]),t._v(" "),s("p",[t._v("GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。")]),t._v(" "),s("p",[t._v("光栅化的结果，就是一块一块的位图")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"第八步-画-draw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第八步-画-draw"}},[t._v("#")]),t._v(" 第八步： 画 （Draw）")]),t._v(" "),s("p",[t._v("最后一个阶段就是"),s("strong",[t._v("画")]),t._v("了")]),t._v(" "),s("p",[t._v("合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。")]),t._v(" "),s("p",[t._v("指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。")]),t._v(" "),s("p",[t._v("变形发生在合成线程，与渲染主线程无关，这就是"),s("code",[t._v("transform")]),t._v("效率高的本质原因。")]),t._v(" "),s("p",[t._v("合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/css/03.jpg"),alt:"图片"}}),t._v(" "),s("h2",{attrs:{id:"什么是-reflow-回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-reflow-回流"}},[t._v("#")]),t._v(" 什么是 reflow（回流）？")]),t._v(" "),s("p",[t._v("reflow 的本质就是重新计算 layout 树。")]),t._v(" "),s("p",[t._v("当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。")]),t._v(" "),s("p",[t._v("为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，"),s("strong",[t._v("改动属性造成的 reflow 是异步完成的")]),t._v("。")]),t._v(" "),s("p",[t._v("也同样因为如此，"),s("strong",[t._v("当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。")])]),t._v(" "),s("p",[s("strong",[t._v("浏览器在反复权衡下，最终决定获取属性立即 reflow。")])]),t._v(" "),s("h2",{attrs:{id:"什么是-repaint-重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-repaint-重绘"}},[t._v("#")]),t._v(" 什么是 repaint（重绘）？")]),t._v(" "),s("p",[t._v("repaint 的本质就是重新根据分层信息计算了绘制指令。")]),t._v(" "),s("p",[t._v("当改动了可见样式后，就需要重新计算，会引发 repaint。")]),t._v(" "),s("p",[t._v("由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。")]),t._v(" "),s("p",[t._v("绘制的过程是靠GPU完成的，速度非常快，因此，"),s("strong",[t._v("相对于导致reflow的代码，仅会导致repaint的代码效率会高出很多")])]),t._v(" "),s("p",[t._v("凡是不会影响盒子排列，仅影响盒子外观的代码都不会导致reflow，仅导致repaint，例如：")]),t._v(" "),s("ul",[s("li",[t._v("改变背景颜色")]),t._v(" "),s("li",[t._v("改变字体颜色")]),t._v(" "),s("li",[t._v("圆角边框")]),t._v(" "),s("li",[t._v("背景图")]),t._v(" "),s("li",[t._v("......")])]),t._v(" "),s("h2",{attrs:{id:"为什么-transform-的效率高"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-transform-的效率高"}},[t._v("#")]),t._v(" 为什么 transform 的效率高？")]),t._v(" "),s("p",[t._v("因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段")]),t._v(" "),s("p",[t._v("由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。")]),t._v(" "),s("h2",{attrs:{id:"为什么要将css写到页面的开头-而js写到页面的最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要将css写到页面的开头-而js写到页面的最后"}},[t._v("#")]),t._v(" 为什么要将CSS写到页面的开头，而JS写到页面的最后？")]),t._v(" "),s("p",[t._v("将CSS写到页面开头，是为了让浏览器尽快读取并解析样式，避免给用户看到丑陋的页面，也是为了避免页面闪烁")]),t._v(" "),s("p",[t._v("将JS代码写到最后，是为了让浏览器尽快呈现页面给用户，然后再执行JS完成交互功")]),t._v(" "),s("h2",{attrs:{id:"什么时候可以获取dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候可以获取dom"}},[t._v("#")]),t._v(" 什么时候可以获取dom")]),t._v(" "),s("p",[t._v("当DOM树完全生成好后，会触发"),s("code",[t._v("DOMContentLoaded")]),t._v("事件")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOMContentLoaded"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOM树已全部生成完毕"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("当页面中的所有外部资源全部加载完毕后，会触发"),s("code",[t._v("load")]),t._v("事件")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"所有资源已加载完成"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("code",[t._v("load")]),t._v("事件也可以针对单个外部资源使用，资源加载完成后触发")])])}),[],!1,null,null,null);a.default=v.exports}}]);