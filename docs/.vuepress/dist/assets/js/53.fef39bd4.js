(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{486:function(t,a,r){"use strict";r.r(a);var s=r(34),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_01-理解异步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_01-理解异步"}},[t._v("#")]),t._v(" 01-理解异步")]),t._v(" "),r("h2",{attrs:{id:"同步函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#同步函数"}},[t._v("#")]),t._v(" 同步函数")]),t._v(" "),r("p",[t._v("当一个函数同步调用时，该函数被调用时不会立即返回，直到该函数所要做的事情全部做完了才返回")]),t._v(" "),r("h2",{attrs:{id:"异步函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步函数"}},[t._v("#")]),t._v(" 异步函数")]),t._v(" "),r("p",[t._v("当一个异步函数被调用时，该函数会立即返回，尽管这个函数规定的操作任务还没有完成")]),t._v(" "),r("h2",{attrs:{id:"javascript-是单线程的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是单线程的"}},[t._v("#")]),t._v(" JavaScript 是单线程的")]),t._v(" "),r("p",[t._v("JS 是一门"),r("strong",[t._v("单线程")]),t._v("的"),r("strong",[t._v("非阻塞")]),t._v("的脚本语言，这表示在同一时刻最多也只有一个代码段执行。")]),t._v(" "),r("p",[t._v("JS 是非阻塞的，那它要怎么实现异步任务呢，靠的就是"),r("strong",[t._v("事件循环（Event Loop）")]),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"为什么-javascript-是单线程的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么-javascript-是单线程的"}},[t._v("#")]),t._v(" 为什么 JavaScript 是单线程的")]),t._v(" "),r("p",[t._v("这是由其执行的环境是浏览器环境所决定的。")]),t._v(" "),r("p",[t._v("试想一下如果 JavaScript 是多线程语言的话，那么当两个线程同时对 Dom 节点进行操作的时候，则可能会出现有歧义的问题，例如一个线程操作的是在一个 Dom 节点中添加内容，另一个线程操作的是删除该 Dom 节点，那么应该以哪个线程为准呢？")]),t._v(" "),r("p",[t._v("所以 JavaScript 作为浏览器的脚本语言，其设计只能是单线程的。")])])}),[],!1,null,null,null);a.default=v.exports}}]);